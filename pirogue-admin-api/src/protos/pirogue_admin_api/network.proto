syntax = "proto3";

package pirogue.admin.network;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service Network {
  /* VPN */
  rpc ListVPNPeers (google.protobuf.Empty) returns (VPNPeerList) {}
  rpc GetVPNPeer (google.protobuf.Int32Value) returns (VPNPeer) {}
  rpc GetVPNPeerConfig (google.protobuf.Int32Value) returns (google.protobuf.StringValue) {}
  rpc AddVPNPeer (VPNPeerAddRequest) returns (VPNPeer) {}
  rpc DeleteVPNPeer (google.protobuf.Int32Value) returns (VPNPeer) {}

  /* WiFi */
  rpc GetWifiConfiguration (google.protobuf.Empty) returns (WifiConfiguration) {}
  rpc SetWifiConfiguration (WifiConfiguration) returns (google.protobuf.Empty) {}

  /* External administration */
  rpc ResetAdministrationToken (google.protobuf.Empty) returns (google.protobuf.StringValue) {}
  rpc GetAdministrationToken (google.protobuf.Empty) returns (google.protobuf.StringValue) {}
  rpc GetAdministrationCertificate (google.protobuf.Empty) returns (google.protobuf.StringValue) {}
  rpc GetAdministrationCLIs (google.protobuf.Empty) returns (google.protobuf.StringValue) {}

  /* External access */
  rpc EnableExternalPublicAccess (PublicAccessRequest) returns (google.protobuf.Empty) {}
  rpc DisableExternalPublicAccess (google.protobuf.Empty) returns (google.protobuf.Empty) {}

  /* 'Firewall' */
  rpc OpenIsolatedPort (IsolatedPort) returns (google.protobuf.Empty) {}
  rpc CloseIsolatedPort (ClosePortRequest) returns (google.protobuf.Empty) {}
  rpc ListIsolatedOpenPorts (google.protobuf.Empty) returns (IsolatedPortList) {}
}

message VPNPeer {
  int32 idx = 1;
  string comment = 2;
  string public_key = 3;
  optional string private_key = 4;
}

message VPNPeerAddRequest {
  optional string comment = 1;
  optional string public_key = 2;
}

message VPNPeerList {
  repeated VPNPeer peers = 1;
}

message WifiConfiguration {
  optional string ssid = 1;
  optional string passphrase = 2;
  optional string country_code = 3;
}

message PublicAccessRequest {
  string domain = 1;
  string email = 2;
}

message IsolatedPort {
  uint32 port = 1;
  optional uint32 destination_port = 2;
}

message IsolatedPortList {
  repeated IsolatedPort ports = 1;
}

message ClosePortRequest {
  optional uint32 port = 1;
}