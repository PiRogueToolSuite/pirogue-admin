pirogue-admin (2.0.4) UNRELEASED; urgency=medium

  * Generate DASHBOARD_PASSWORD and WIFI_PASSPHRASE when pirogue-admin is
    called with --autodetect. That's meant to happen once during initial
    installation, or when pirogue-base is upgraded from 1.x to 2.x.
  * Display a colorful warning accordingly, pointing at the online
    documentation for instructions on how to change them.

 -- Cyril Brulebois <cyril@debamax.com>  Wed, 23 Oct 2024 01:41:44 +0200

pirogue-admin (2.0.3) bookworm; urgency=medium

  * Hardcode python3-pirogue-admin-api version in (Build-)Depends, since
    it's critical to have protocol and code aligned. Currently, that means
    version 2.0.1.

 -- Cyril Brulebois <cyril@debamax.com>  Tue, 22 Oct 2024 17:39:09 +0200

pirogue-admin (2.0.2) bookworm; urgency=medium

  * Add isolated network port management
  * Bump up administration token length

 -- Christophe Andral <christophe@andral.fr>  Mon, 21 Oct 2024 16:25:34 +0200

pirogue-admin (2.0.1) bookworm; urgency=medium

  * Add Conflit/Replace with pirogue-cli in debian control rules

 -- Christophe Andral <christophe@andral.fr>  Wed, 16 Oct 2024 12:41:52 +0200

pirogue-admin (2.0.0) bookworm; urgency=medium

  * Add support for variable usage in actions
  * Dump to v2 serie

 -- Christophe Andral <christophe@andral.fr>  Tue, 15 Oct 2024 11:39:49 +0200

pirogue-admin (1.4.4) bookworm; urgency=medium

  * Add support for provisioning variables: when autodetection is
    performed (e.g. `pirogue-admin --autodetect` from pirogue-base's
    postinst script), /var/lib/pirogue/admin/user.config.yaml is used
    automatically if present, adding or replacing variables among the
    autodetected settings. If anything goes wrong while doing so, or if
    there's no such file in the first place, only the autodetected
    settings are returned.

 -- Cyril Brulebois <cyril@debamax.com>  Sun, 08 Sep 2024 00:02:26 +0200

pirogue-admin (1.4.3) bookworm; urgency=medium

  * Delete support for NFTABLES_MODE and IPTABLES_MODE conditions:
     - We want to focus on nftables support.
     - That relies on having the iptables package installed as it's the
       one responsible for setting up nft (auto/default) vs. legacy
       alternatives. And we're no longer depending on iptables via
       pirogue-networking anyway.

 -- Cyril Brulebois <cyril@debamax.com>  Sat, 07 Sep 2024 19:59:08 +0200

pirogue-admin (1.4.2) bookworm; urgency=medium

  * Adjust --redeploy vs. missing configuration file to help support
    upgrades on existing systems (without pirogue-admin integration):
     - Tone down the logging from error to warning.
     - Exit with rc=0 instead of rc=1.

 -- Cyril Brulebois <cyril@debamax.com>  Sat, 07 Sep 2024 15:49:42 +0200

pirogue-admin (1.4.1) bookworm; urgency=medium

  * Extend support for NetworkManager, when the isolated interface is an
    Ethernet one (APPLIANCE mode):
     - Create/update pirogue-isolated-network.nmconnection via nmcli, with
       fewer parameters than in the Wi-Fi case (AP mode).
  * Make sure the link is up when configuring the isolated interface in
    the ifupdown case (link down spotted on a Wi-Fi-only laptop being
    configured in APPLIANCE mode, with a USB/Ethernet adapter for the
    isolated network).

 -- Cyril Brulebois <cyril@debamax.com>  Fri, 06 Sep 2024 17:02:34 +0200

pirogue-admin (1.4.0) bookworm; urgency=medium

  * Improve ifupdown detection: call `ifquery --list` twice, once with
    `--all` and once with `--allow hotplug`. The former works for /e/n/i
    as set up in Debian/PTS Raspberry Pi images, the latter is required to
    spot allow-hotplug interfaces set up by debian-installer.
  * Use /etc/systemd/network/01-pirogue-isolated-network.network in the
    networkd+resolved case (instead of just 01-pirogue.network) to make it
    clear this is a PiRogue configuration file, for the isolated network
    specifically.
  * Add initial support for NetworkManager, when the isolated interface is
    a Wi-Fi one (AP mode):
     - Create/update pirogue-isolated-network.nmconnection via nmcli.
     - Disable hostapd in that case, as NM fully manages the interface.

 -- Cyril Brulebois <cyril@debamax.com>  Fri, 06 Sep 2024 09:16:39 +0200

pirogue-admin (1.3.4) bookworm; urgency=medium

  * Fix expectation mismatch:
     - The autodetection code returns EXTERNAL_NETWORKS as a list, rather
       than as a string with comma-separated networks.
     - The format_nftables_list_of_networks formatter expects a string
       instead, just like the update_configuration() implementation.
    The former seems to be a better representation (for computers and for
    humans) but all variables-related code deals with dict[str, str], so
    adjust the autodetection code.

 -- Cyril Brulebois <cyril@debamax.com>  Fri, 30 Aug 2024 12:36:47 +0200

pirogue-admin (1.3.3) bookworm; urgency=medium

  * Make --redeploy fail instead of just logging a warning: that must
    never happen! If it does, that probably means users trying to do weird
    things, or buggy postinst scripts.
  * Add support for the format_nftables_list_of_networks formatter, for
    pirogue-networking's EXTERNAL_NETWORKS variable.
  * Add support for updating the configuration when redeploying, when
    EXTERNAL_NETWORKS is missing: derive it from EXTERNAL_INTERFACE and
    the currently-configured networks for this interface.
  * Make `pirogue-admin --autodetect` set EXTERNAL_NETWORKS as well (for
    the initial configuration).

 -- Cyril Brulebois <cyril@debamax.com>  Fri, 30 Aug 2024 12:06:12 +0200

pirogue-admin (1.3.2) bookworm; urgency=medium

  * Improve support for comments:
     - Set a format and validate against it: any combinations (even empty)
       of letters, digits, dashes, underscores, and dots are OK.
     - Stop storing client-%d if the comment is empty.
     - Make it optional to specify a destination filename when generating
       a peer config file, zip file, or QR code. If None is passed, use
       the peer comment if any, falling back to a default format string.
     - Make the pirogue-admin-wireguard let generate_*() pick and return
       the destination filename.

 -- Cyril Brulebois <cyril@debamax.com>  Tue, 27 Aug 2024 16:36:58 +0200

pirogue-admin (1.3.1) bookworm; urgency=medium

  * Fix support for --redeploy (only redeploy when this option is passed).

 -- Cyril Brulebois <cyril@debamax.com>  Sun, 25 Aug 2024 06:15:42 +0200

pirogue-admin (1.3.0) bookworm; urgency=medium

  * Adjust variable names:
     - EXTERNAL_NETWORK_IFACE → EXTERNAL_INTERFACE
     - ISOLATED_NETWORK_ADDR → ISOLATED_ADDRESS
     - ISOLATED_NETWORK_IFACE → ISOLATED_INTERFACE
     - PUBLIC_EXTERNAL_NETWORK_ADDR → PUBLIC_EXTERNAL_ADDRESS
    (https://github.com/PiRogueToolSuite/pirogue-admin/issues/18).
  * Adjust local variable names accordingly:
     - external_addr → public_external_address
     - external_ipv4_address → public_external_address

 -- Cyril Brulebois <cyril@debamax.com>  Sun, 25 Aug 2024 05:43:01 +0200

pirogue-admin (1.2.4) bookworm; urgency=medium

  * Avoid saving the configuration when redeploying.

 -- Cyril Brulebois <cyril@debamax.com>  Sun, 25 Aug 2024 03:06:30 +0200

pirogue-admin (1.2.3) bookworm; urgency=medium

  * Set PersistentKeepAlive for the PiRogue-side WireGuard peer (“server”)
    as well (https://github.com/PiRogueToolSuite/pirogue-admin/issues/13).
  * Add initial support for `pirogue-admin --redeploy --commit` to be used
    in postinst scripts when upgrading: everything is deployed again using
    the stored config.yaml except the WireGuard configuration (see
    https://github.com/PiRogueToolSuite/pirogue-admin/issues/9). For now,
    a warning is logged (without setting a failed return code) if the
    config file is missing.

 -- Cyril Brulebois <cyril@debamax.com>  Sun, 25 Aug 2024 01:24:05 +0200

pirogue-admin (1.2.2) bookworm; urgency=medium

  * Bridge the gap between both CLI tools:
     - We could fold pirogue-admin-wireguard into pirogue-admin, but
       that'd require some work, and proper integration is pending via
       a pirogue-admin server exposing an API through gRPC, via a remote
       API, and via a local pirogue-admin client.
     - Let's not spend more time on this right now, and re-use
       pirogue-admin variables if any, parsing pirogue-admin's config.yaml
       file manually, and keeping fallback variables if the file is
       missing or is missing some variables.
     - This makes it possible for pirogue-base.postinst to leverage
       pirogue-admin for any of the three supported modes, and for users
       to manipulate peers using pirogue-admin-wireguard.
  * Fix prefix length for AllowedIPs in each [Peer] section “server”-side
    (from /24 to /32).

 -- Cyril Brulebois <cyril@debamax.com>  Fri, 23 Aug 2024 03:47:11 +0200

pirogue-admin (1.2.1) bookworm; urgency=medium

  * Add initial support for VPN mode to the autodetection code:
     - Implement detect_external_ipv4_address() using icanhazip.com
     - Use it to set PUBLIC_EXTERNAL_NETWORK_ADDR in the VPN case.
     - Mark VPN as a supported operating mode accordingly.
  * Switch from a SYSTEM_DNSMASQ condition to an ENABLE_DHCP variable:
     - We need DHCP support in the AP case.
     - We might need to enable OR disable DHCP support in the APPLIANCE
       case.
     - We don't need DHCP support in the VPN case (but it doesn't hurt).
  * Set ENABLE_DHCP to true in all use cases for the time being, and let
    users disable it if they so wish.
  * Delete support for the SYSTEM_DNSMASQ condition.
  * Introduce a bool formatter. While we don't actually use this new
    ENABLE_DHCP variable (defined as a boolean) anywhere in the templates,
    we need to build replacement strings for all variables. Settle for
    using str() on the value, arbitrarily.
  * Turn format_dhcp_range_network() into format_dhcp_range_line() so that
    the entirety of the dhcp-range= line (for the dnsmasq snippet) can be
    controlled; we want to comment it out entirely when ENABLE_DHCP is
    false. As a side effect, we're moving the “24h” lease validity from
    the template shipped by pirogue-networking to formatters.py; but that
    particular combination of variables was weird already anyway.
  * Add initial support for VPN mode to SystemConfig:
     - Mention PUBLIC_EXTERNAL_NETWORK_ADDR as being tricky in various
       comments and docstrings, its being needed depends on the value of
       a different variable (SYSTEM_OPERATING_MODE). See commit messages
       for possible solutions.
     - Add support for VPN mode in apply_configuration: make sure
       PUBLIC_EXTERNAL_NETWORK_ADDR is set (see above), then instantiate
       WgManager with it and with the isolated address and network, which
       should be enough to make sure wg0 comes up, the systemd unit is
       enabled and started, the private / private key pair is created,
       etc.

 -- Cyril Brulebois <cyril@debamax.com>  Fri, 23 Aug 2024 02:20:46 +0200

pirogue-admin (1.2.0) bookworm; urgency=medium

  * Add initial WireGuard support: ship a pirogue-admin-wireguard command,
    leveraging a new WgManager class, managing the PiRogue-side peer as
    well as remote peers.
  * Add qrencode to Depends accordingly.
  * Ship /var/lib/pirogue/admin(/wireguard) directories in the package.
  * Add support for detecting the public IPv4 address using icanhazip.com.

 -- Cyril Brulebois <cyril@debamax.com>  Thu, 22 Aug 2024 01:53:11 +0200

pirogue-admin (1.1.0) bookworm; urgency=medium

  * Ship pirogue-admin under /usr/sbin instead of /usr/bin. Users should
    be using commands provided by pirogue-admin-client.
  * Use the logging module instead of print() in various places.
  * Add variables support to the SUPPORTED_CONDITIONS dict, and ensure all
    needed variables can be gathered and checked accordingly.
  * Add condition validation to the index.yaml parsing.
  * Add initial support for condition and actions_else, in addition to
    regular actions support. The combination of actions, condition, and
    actions_else is going to be very useful to configure and enable
    a service (if the condition is met), and to deconfigure and disable
    a service (if it isn't). To make sure we can toggle a condition and
    have actions run in both cases, it seems easier to have a slight
    asymmetry:
     - If the condition is fulfilled, actions are run if the contents of
       the file change.
     - If the condition is not fulfilled, the file is removed (not keeping
       outdated/irrelevant contents around), and actions_else are run
       unconditionally.
  * Make the DNSMASQ condition implementation consider the SYSTEM_DNSMASQ
    variable, but only in the APPLIANCE mode (since the AP mode absolutely
    requires it).
  * Hardcode SYSTEM_DNSMASQ in the autodetection code for the time being.
    Users can turn it off if they so wish. We probably want to move to
    a different distinction anyway: have dnsmasq available in any case,
    but only enable DHCP conditionally.
  * Add initial systemd-networkd/systemd-resolved support, allowing to
    configure the isolated network.
  * Finally, mark APPLIANCE mode as supported.

 -- Cyril Brulebois <cyril@debamax.com>  Sat, 17 Aug 2024 18:38:57 +0200

pirogue-admin (1.0.0) bookworm; urgency=medium

  * Initial release.
  * It supports Raspberry Pi devices, implementing autodetection support
    and configuration management for packages shipping pirogue-admin
    metadata.

 -- Cyril Brulebois <cyril@debamax.com>  Wed, 14 Aug 2024 18:26:57 +0200
